package cr.ac.tec.graph.api.resources;

import javax.ws.rs.DELETE;
import javax.ws.rs.PUT;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;

import cr.ac.tec.graph.api.dto.DB;
import cr.ac.tec.graph.api.dto.Graph;
import cr.ac.tec.graph.api.dto.Node;

public class NodeResource {

	private Node node;
	private Graph g;
	
	public NodeResource(Graph g, String idNode) {
		this.node = findNode(idNode);
		this.g = g;
	}
	
	/**
	 * Elimina el nodo con el id pasado por parametro "PASAR COMO ENTERO http://localhost:9080/Proyecto3/graphs/13/nodes/3"
	 * @return
	 */
	@DELETE
	@Produces("application/json")
	public Response deleteNode() {
		
		if(g != null) {
			removeNode(node.getId());
			return Response.status(200)
					.entity(DB.grafos.get(g))
					.build();
		}
		return Response.status(404).entity("NO ESTA")
				.build();
	}
	
	/**
	 * 
	 */
	@PUT
	@Produces("application/json")
	public Response updateEntity(String entity) {
		
		if(g != null) {
			node.setEntity(entity);
			return Response.status(200)
					.entity(DB.grafos.get(g))
					.build();
		}
		return Response.status(404).entity("NO ESTA")
				.build();
	}
	
	private boolean removeNode(String id) {
		for(int i = 0; i < g.getNodes().size(); i++) {
			if(g.getNodes().get(i).getId().equals(id)) {
				g.getNodes().remove(i);
				return true;
			}
		}
		return false;
	}
	
	private Node findNode(String id) {
		for(int i = 0; i < g.getNodes().size(); i++) {
			if(g.getNodes().get(i).getId().equals(id)) {
				return g.getNodes().get(i);
			}
		}
		return null;
	}
	
}
