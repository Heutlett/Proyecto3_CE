package cr.ac.tec.graph.api.util;

import cr.ac.tec.graph.api.dto.Graph;

public class MatrizAdyacencia {

	public static long[][] generarMatriz(Graph g){
		
		long [][] matriz = new long[g.getNodes().size()][g.getNodes().size()];
		
		for(int i = 0; i < g.getEdges().size(); i++) {
			
			int fila = Integer.valueOf(g.getEdges().get(i).getStart().substring(1))-1;
			int columna = Integer.valueOf(g.getEdges().get(i).getEnd().substring(1))-1;
			
			matriz[fila][columna] = g.getEdges().get(i).getWeight();
			
		}
		
		return matriz;
		
	}
	
    public static String RutaCorta( long [][] mAdy){

        int vertices = mAdy.length;
        long matrizAdyacencia [][] = mAdy;
        String caminos [][] = new String [vertices][vertices];
        String caminosAuxiliares [][]=new String [vertices][vertices];
        String caminoRecorrido ="",cadena="",caminitos="";
        int i,j,k;
        float temporal1, temporal2, temporal3, temporal4, minimo;
        //inicializar matrices y caminos
        for(i=0;i<vertices;i++) {
            for(j=0;j<vertices;j++){
                caminos[i][j]="";
                caminosAuxiliares[i][j]="";
            }
        }

        for(k=0;k<vertices; k++){
            for(i=0;i<vertices; i++){
                for (j=0;j<vertices; j++){

                    temporal1=matrizAdyacencia [i][j];
                    temporal2=matrizAdyacencia [i][k];
                    temporal3=matrizAdyacencia [k][j];
                    temporal4= temporal2 + temporal3;
                    //encontrando al minimo
                    minimo=Math.min(temporal1, temporal4);
                    if(temporal1!=temporal4){
                        if(minimo == temporal4){
                            caminoRecorrido="";
                            caminosAuxiliares[1][j] = k + "";
                            caminos[i][j]= caminosR(i,k,caminosAuxiliares, caminoRecorrido) + (k+1);

                        }
                    }
                    matrizAdyacencia[i][j]=(long) minimo;
                }
            }
        }
        //agregando el camino a cadeba
        for(i=0;i<vertices;i++) {
            for(j=0;j<vertices;j++){
                cadena=cadena+"["+matrizAdyacencia[i][j]+"]";
            }
            cadena=cadena+"\n";
        }
        for(i=0;i<vertices;i++) {
            for(j=0;j<vertices;j++){
                if(matrizAdyacencia[i][j]!=1000000000){
                    if(i!=j){
                        if(caminos[i][j].equals("")){
                            caminitos += "de ("+ (i+1)+"---->"+(j+1)+") irse por...("+(i+1)+", "+(j+1)+")\n";
                        }else{ caminitos +="de ("+ (i+1)+"---->"+(j+1)+") irse por...("+(i+1)+", "+caminos[i][j] + ", " +(j+1)+")\n";
                        }
                    }
                }
            }
        }

        return "LA MATRIZ DE CAMINOS MAS CORTOS ENTRE LOS DIFERENTES VERTICES ES \n" +cadena+
                "\n LOS DIFERENTES CAMINOS MAS CORTOS ENTRE VERTICES SON:\n"+caminitos;
    }
    public String caminosR(int i, int k, String[][] caminosAuxiliares, String caminoRecorrido) {
        if(caminosAuxiliares[i][k].equals("")){
            return "";
        }else{
            caminoRecorrido +=caminosR(i, Integer.parseInt(caminosAuxiliares[i][k].toString()), caminosAuxiliares, caminoRecorrido)+(Integer.parseInt(caminosAuxiliares[i][k].toString())+1)+", ";
            return caminoRecorrido;
        }
    }
	
}
