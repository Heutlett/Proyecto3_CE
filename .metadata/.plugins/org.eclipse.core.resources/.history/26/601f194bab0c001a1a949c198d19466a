package cr.ac.tec.graph.api.util;

import cr.ac.tec.graph.api.dto.Graph;
import cr.ac.tec.graph.api.dto.ObjectDijkstra;

public class Dijkstra {
	
	//metodo para derminar xaminos segun el algoritmo de floyd
    public static String RutaCorta( long [][] mAdy, int start, int end){

        int vertices = mAdy.length;
        long matrizAdyacencia [][] = mAdy;
        String caminos [][] = new String [vertices][vertices];
        String caminosAuxiliares [][]=new String [vertices][vertices];
        String caminoRecorrido ="",cadena="",caminitos="";
        int i,j,k;
        float temporal1, temporal2, temporal3, temporal4, minimo;
        //inicializar matrices y caminos
        for(i=0;i<vertices;i++) {
            for(j=0;j<vertices;j++){
                caminos[i][j]="";
                caminosAuxiliares[i][j]="";
            }
        }

        for(k=0;k<vertices; k++){
            for(i=0;i<vertices; i++){
                for (j=0;j<vertices; j++){

                    temporal1=matrizAdyacencia [i][j];
                    temporal2=matrizAdyacencia [i][k];
                    temporal3=matrizAdyacencia [k][j];
                    temporal4= temporal2 + temporal3;
                    //encontrando al minimo
                    minimo=Math.min(temporal1, temporal4);
                    if(temporal1!=temporal4){
                        if(minimo == temporal4){
                            caminoRecorrido="";
                            caminosAuxiliares[1][j] = k + "";
                            caminos[i][j]= caminosR(i,k,caminosAuxiliares, caminoRecorrido) + (k+1);

                        }
                    }
                    matrizAdyacencia[i][j]=(long) minimo;
                }
            }
        }
        for(i=0;i<vertices;i++) {
            for(j=0;j<vertices;j++){
                if(matrizAdyacencia[i][j]!=1000000000){
                    if(i!=j && i == start && end == j){
                        if(caminos[i][j].equals("")){
                            caminitos += "de ("+ (i)+"---->"+(j)+") irse por...("+(i)+", "+(j)+")   peso: " + matrizAdyacencia[i][j] + "\n";
                        }else{ caminitos +="de ("+ (i)+"---->"+(j)+") irse por...("+(i)+", "+caminos[i][j] + ", " +(j)+")   peso: " + matrizAdyacencia[i][j]  + "\n";
                        }
                    }
                }
            }
        }
        
        ObjectDijkstra d = new ObjectDijkstra()

        return caminitos;
    }
    public static String caminosR(int i, int k, String[][] caminosAuxiliares, String caminoRecorrido) {
        if(caminosAuxiliares[i][k].equals("")){
            return "";
        }else{
            caminoRecorrido +=caminosR(i, Integer.parseInt(caminosAuxiliares[i][k].toString()), caminosAuxiliares, caminoRecorrido)+(Integer.parseInt(caminosAuxiliares[i][k].toString())+1)+", ";
            return caminoRecorrido;
        }
    }
	
	
}
