package cr.ac.tec.graph.api.resources;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;

import cr.ac.tec.graph.api.dto.DB;
import cr.ac.tec.graph.api.dto.Graph;
import cr.ac.tec.graph.api.dto.Persona;

@Path("/graphs")
public class GraphsResource {	
	
	/*
	@GET
	@Produces("application/json")
	public Response getGraphs() {
		return Response.status(200)
				.entity(DB.db)
				.build();
	}
	
	@POST
	@Consumes("application/json")
	@Produces("application/json")
	public Response createGraph(Persona p) {
		DB.db.put(p.getId(), p);
		return Response.status(200)
				.entity(p)
				.build();
	}
	*/
	
	
	@POST
	@Consumes("application/json")
	@Produces("application/json")
	public Response createGraph(Graph g) {
		g.setId(g.getId());
		DB.grafos.add(g);
		return Response.status(200)
				.entity(g)
				.build();
	}
	
	@GET
	@Produces("application/json")
	public Response getGraphs() {
		return Response.status(200)
				.entity(DB.grafos)
				.build();
	}
	
	//Enviar en modo entero /graphs/04
	@DELETE
	@Produces("application/json")
	public Response deleteGraphData() {
		DB.grafos.clear();
			return Response.status(200)
					.entity(DB.grafos)
					.build();
	}
	
	
	@Path("{id}")
	public GraphResource handleSigleGraph(@PathParam("id") String graphId) {
		return new GraphResource(graphId);
	}
	
		
	
}