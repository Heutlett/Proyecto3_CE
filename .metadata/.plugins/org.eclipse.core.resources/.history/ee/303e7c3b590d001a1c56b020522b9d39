package cr.ac.tec.graph.api.resources;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import cr.ac.tec.graph.api.dto.DB;
import cr.ac.tec.graph.api.dto.Graph;
import cr.ac.tec.graph.api.dto.Node;
import cr.ac.tec.graph.api.dto.ObjectDijkstra;
import cr.ac.tec.graph.api.util.MatrizAdyacencia;

public class GraphFinalResource {

	private Graph g;
	
	public GraphFinalResource(String graphId) {
		this.g = DB.grafos.get(graphId);
	}
	
	@Path("/degree")
	public GraphDegreeResource handleSigleGraphDegree() {
	return new GraphDegreeResource(g);
	}
	/*
	@Path("/dijkstra")
	public GraphDijkstraResource handleSigleGraphDijkstra() {
	return new GraphDijkstraResource(g);
	*/
	
	/**
	 * Devuelve la lista de grafos
	 * @return
	 */
	
	@GET
	@Path("dijkstra")
	@Produces("application/json")
	public Response getDijkstra(@QueryParam("startNode") String firstname, 
			@QueryParam("endNode") String lastname) {

		
		ObjectDijkstra o = MatrizAdyacencia.generarMatriz(g).encontrarRutaMinimaDijkstra(firstname, lastname);
		
		String [] ids = o.getRuta();
		Node[] nodes = new Node[ids.length];
		
		for(int i = 0; i < ids.length; i++) {
			
			for(int e = 0; e < g.getNodes().size(); e++) {
				
				if(ids[i].substring(4).equals(g.getNodes().get(e).getId())) {
					nodes[i] = g.getNodes().get(e);
				}
				
			}
			
		}
		
		ObjectDijkstra resultado = new ObjectDijkstra(o.getValorCamino(), nodes);
			
		if(resultado != null) {
			return Response.status(200)
					.entity(resultado)
					.build();
			
		}
		
	}
	
	
	
}
