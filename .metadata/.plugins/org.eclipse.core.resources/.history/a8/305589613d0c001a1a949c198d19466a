package cr.ac.tec.graph.api.resources;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;

import cr.ac.tec.graph.api.dto.DB;
import cr.ac.tec.graph.api.dto.Graph;
import cr.ac.tec.graph.api.dto.Persona;

@Path("/graphs")
public class GraphsResource {	
	
	/**
	 * Crea un nuevo grafo y lo agrega a la lista 
	 * @param g 
	 * @return
	 */
	@POST
	@Produces("application/json")
	public Response createGraph() {
		Graph g = new Graph();
		DB.grafos.put(g.getId(), g);
		return Response.status(200)
				.entity(g)
				.build();
	}
	/**
	 * Devuelve la lista de grafos
	 * @return
	 */
	@GET
	@Produces("application/json")
	public Response getGraphs() {
		return Response.status(200)
				.entity(DB.grafos)
				.build();
	}
	
	/**
	 * Borra todos los grafos 
	 * @return
	 */
	@DELETE
	@Produces("application/json")
	public Response deleteGraphData() {
		DB.grafos.clear();
			return Response.status(200)
					.build();
	}
	
	/**
	 * Busca un grafo por id y realiza diferentes acciones
	 * @param graphId
	 * @return
	 */
	@Path("{id}")
	public GraphResource handleSigleGraph(@PathParam("id") String graphId) {
		return new GraphResource(graphId);
	}
	
		
	
}