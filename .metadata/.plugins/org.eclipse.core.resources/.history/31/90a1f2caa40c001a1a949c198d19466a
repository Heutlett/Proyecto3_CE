package cr.ac.tec.graph.api.util;

import cr.ac.tec.graph.api.dto.Graph;

public class Dijkstra {
	
    public  int distance[];
    public  int cost[][];

    public Dijkstra(int size){
        distance = new int[size];
        cost = new int[size][size];
    }

    public void calc(int n,int s)
    {
        int flag[] = new int[n+1];
        int i,minpos=1,k,c,minimum;

        for(i=1;i<=n;i++)
        {
            flag[i]=0;
            this.distance[i]=this.cost[s][i];
        }
        c=2;
        while(c<=n)
        {
            minimum=99;
            for(k=1;k<=n;k++)
            {
                if(this.distance[k]<minimum && flag[k]!=1)
                {
                    minimum=this.distance[i];
                    minpos=k;
                }
            }
            flag[minpos]=1;
            c++;
            for(k=1;k<=n;k++)
            {
                if(this.distance[minpos]+this.cost[minpos][k] <  this.distance[k] && flag[k]!=1 )
                    this.distance[k]=this.distance[minpos]+this.cost[minpos][k];
            }
        }

    }
    public static String rutaCorta(int [][] m, int source)
    {
        int i,j;
        String resultado = "";
        Dijkstra d = new Dijkstra(15);
        int matriz[][] = m;
        for(i=0;i < matriz.length;i++)
            for(j=0;j < matriz.length;j++)
            {
                d.cost[i][j]=matriz[i][j];
            }

        d.calc(matriz.length,source);
        
        int indice = 0;
        int minCost = 10000000;
        
        for(i=0;i<=matriz.length;i++) {
        	 if(i!=source) {
        		 if(d.distance[i]< minCost) {
        			 minCost = d.distance[i];
        			 indice = i;
        		 }
        		 
        	 }
                 
        }
        resultado += "source :"+source+"\t destination :"+indice+"\t MinCost is :"+minCost+"\t" + "\n";
        
        
        return resultado;

    }
	
	
}
